#ifndef _MAIN_H_
#define _MAIN_H_

#define BOARD_EDU_CIAA_NXP

#include "board.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include <stdlib.h>

#include "Configure.h"
#include "utils.h"

xSemaphoreHandle xStartSemaphore;	//Semaforo para el encendido del horno
TaskHandle_t StartTaskHandle;		//Handler de la tarea de encendido

xSemaphoreHandle xStopSemaphore;	//Semaforo para el apagado del horno
TaskHandle_t StopTaskHandle;		//Handler de la tarea de apagado

xSemaphoreHandle xADCSemaphore;	//Semaforo para el ADC
TaskHandle_t ADCTaskHandle;		//Handler de la tarea del ADC
volatile uint16_t adc_data=0;	//Variable global donde se almacenan las mediciones del ADC

xSemaphoreHandle xControllerSemaphore;	//Semaforo para el controlador
TaskHandle_t ControllerTaskHandle;		//Handler de la tarea del controlador

xSemaphoreHandle xPhaseSemaphore;		//Semaforo para la deteccion de cruces por cero
TaskHandle_t PhaseTaskHandle;			//Handler de la tarea del detector de fase

TaskHandle_t UpdateReferenceTaskHandle; //Handler de la tarea que actualiza la referencia de temperatura

float thermocouple_temp=0;		//Temperatura de la termocupla
bool trigger_state=false;		//Estado del trigger

#define TEMPERATURE_INERTIA 5		//Inercia de temperatura del horno
#define REFERENCE_INTERVAL (5000/(portTICK_RATE_MS))	//Intervalo de tiempo para la actualizacion de la referencia
float reference=0;				//Temperatura de referencia

/* Curva de temperatura que se debe seguir */
const float temperature_profile[]={25,
		29.081585,
		 29.046684,
		 29.041842,
		 29.065825,
		 29.117419,
		 29.195439,
		 29.298724,
		 29.426137,
		 29.576565,
		 29.748920,
		 29.942137,
		 30.155177,
		 30.387020,
		 30.636674,
		 30.903167,
		 31.185551,
		 31.482901,
		 31.794312,
		 32.118904,
		 32.455818,
		 32.804215,
		 33.163280,
		 33.532218,
		 33.910254,
		 34.296636,
		 34.690632,
		 35.091528,
		 35.498634,
		 35.911277,
		 36.328804,
		 36.750583,
		 37.176000,
		 37.604460,
		 38.035387,
		 38.468225,
		 38.902434,
		 39.337493,
		 39.772900,
		 40.208170,
		 40.642835,
		 41.076443,
		 41.508563,
		 41.938778,
		 42.366687,
		 42.791907,
		 43.214070,
		 43.632825,
		 44.047836,
		 44.458783,
		 44.865361,
		 45.267279,
		 45.664262,
		 46.056050,
		 46.442397,
		 46.823070,
		 47.197851,
		 47.566536,
		 47.928933,
		 48.284866,
		 48.634169,
		 48.976690,
		 49.312291,
		 49.640844,
		 49.962234,
		 50.276360,
		 50.583129,
		 50.882463,
		 51.174293,
		 51.458561,
		 51.735222,
		 52.004240,
		 52.265589,
		 52.519253,
		 52.765229,
		 53.003519,
		 53.234138,
		 53.457110,
		 53.672466,
		 53.880247,
		 54.080503,
		 54.273293,
		 54.458683,
		 54.636746,
		 54.807564,
		 54.971228,
		 55.127834,
		 55.277485,
		 55.420293,
		 55.556374,
		 55.685853,
		 55.808858,
		 55.925526,
		 56.035998,
		 56.140422,
		 56.238949,
		 56.331737,
		 56.418948,
		 56.500749,
		 56.577312,
		 56.648811,
		 56.715426,
		 56.777340,
		 56.834741,
		 56.887817,
		 56.936761,
		 56.981771,
		 57.023043,
		 57.060780,
		 57.095184,
		 57.126460,
		 57.154815,
		 57.180457,
		 57.203597,
		 57.224444,
		 57.243210,
		 57.260107,
		 57.275349,
		 57.289147,
		 57.301715,
		 57.313265,
		 57.324009,
		 57.334159,
		 57.343925,
		 57.353516,
		 57.363140,
		 57.373004,
		 57.383312,
		 57.394266,
		 57.406068,
		 57.418914,
		 57.433000,
		 57.448519,
		 57.465659,
		 57.484606,
		 57.505542,
		 57.528646,
		 57.554092,
		 57.582049,
		 57.612685,
		 57.646160,
		 57.682629,
		 57.722244,
		 57.765150,
		 57.811488,
		 57.861392,
		 57.914989,
		 57.972402,
		 58.033747,
		 58.099132,
		 58.168660,
		 58.242424,
		 58.320514,
		 58.403007,
		 58.489978,
		 58.581490,
		 58.677598,
		 58.778351,
		 58.883787,
		 58.993936,
		 59.108819,
		 59.228448,
		 59.352824,
		 59.481939,
		 59.615775,
		 59.754305,
		 59.897491,
		 60.045281,
		 60.197618,
		 60.354429,
		 60.515632,
		 60.681132,
		 60.850825,
		 61.024592,
		 61.202303,
		 61.383816,
		 61.568975,
		 61.757613,
		 61.949547,
		 62.144585,
		 62.342518,
		 62.543124,
		 62.746167,
		 62.951397,
		 63.158550,
		 63.367347,
		 63.577494,
		 63.788682,
		 64.000587,
		 64.212868,
		 64.425170,
		 64.637121,
		 64.848335,
		 65.058405,
		 65.266912,
		 65.473417,
		 65.677466,
		 65.878586,
		 66.076289,
		 66.270065,
		 66.459391,
		 66.643721,
		 66.822495,
		 66.995131,
		 67.161030,
		 67.319573,
		 67.470123,
		 67.612021,
		 67.744590,
		 67.867134,
		 67.978935,
		 68.079254,
		 68.167334,
		 68.242395,
		 68.303637,
		 68.350238,
		 68.381355,
		 68.396123,
		 68.393654,
		 68.373041,
		 68.333350,
		 68.273629,
		 68.192900,
		 68.090162,
		 67.964394,
		 67.814547,
		 67.639551,
		 67.438311,
		 67.209709,
		 66.952601,
		 66.665820,
		 66.348173,
		 65.998442,
		 65.615384,
		 65.197731,
		 64.744189,
		 64.253436,
		 63.724127,
		 63.154890,
		 62.544323,
		 61.891002,
		 61.193473
};

static void vHandlerStart(void *pvParameters);	//Tarea donde se espera que se presione el boton de encendido
static void vHandlerStop(void *pvParameters);	//Tarea donde se espera que se presione el boton de apagado
static void vHandlerGetTemperature(void *pvParameters);	//Tarea que mide la temperatura
static void vHandlerController(void *pvParameters);		//Tarea que controla la resistencia
static void vHandlerZeroCrossing(void *pvParameters);	//Tarea que se ejecuta con los cruces por cero
static void vHandlerUpdateTemperatureReference(void *pvParameters);	//Tarea que actualiza la referencia de temperatura

#endif
