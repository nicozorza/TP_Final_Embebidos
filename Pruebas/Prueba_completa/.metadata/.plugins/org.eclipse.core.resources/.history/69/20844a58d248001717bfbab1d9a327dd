#include "Configure.h"
/*****************************************************************************
 * Funciones de configuracion
*****************************************************************************/
/* Sets up system hardware */
void SetupHardware(void){
	SystemCoreClockUpdate();
	Board_Init();

	ConfigureADC();	//Configuracion del ADC
	ConfigurePhaseDetector();	//Configuracion de las interrupciones para el detector de fase
	ConfigureTimerFireTrigger();	//Se configura el timer para la generacion del delay del trigger
	ConfigureTimerTriggerOn();
}

/* Configuracion del ADC */
void ConfigureADC( void ){
	Chip_ADC_Init(ADC_TEMPERATURE, &ADCSetup);						//Se inicializa el ADC
	Chip_ADC_EnableChannel(ADC_TEMPERATURE, ADC_CHANNEL, ENABLE);		//Se habilita el canal 0
	NVIC_SetPriority(ADC_IRQN, ADC_INTERRUPT_PRIORITY);	//Se setea la prioridad de la interrupcion
	NVIC_EnableIRQ(ADC_IRQN);								//Se habilita las interrupciones
	Chip_ADC_Int_SetChannelCmd(ADC_TEMPERATURE, ADC_CHANNEL, ENABLE);	//Se habilita las interrupciones del canal 0
}

/* Configuro las interrupciones externas generadas por el detector de fase.*/
void ConfigurePhaseDetector( void ){

	/* Se configura el pin de deteccion para el modo GPIO */
	Chip_SCU_PinMuxSet(PHASE_SCU_INT_PORT, PHASE_SCU_INT_PIN,(SCU_MODE_INBUFF_EN|SCU_MODE_INACT|SCU_MODE_FUNC0) );

	/* Se configura el pin como entrada */
	Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, PHASE_GPIO_INT_PORT, PHASE_GPIO_INT_PIN);

	/* Se configura el canal PININT_INDEX para las interrupciones */
	Chip_SCU_GPIOIntPinSel(PHASE_PININT_INDEX, PHASE_GPIO_INT_PORT, PHASE_GPIO_INT_PIN);

	Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH(PHASE_PININT_INDEX));	//Se limpian las interrupciones
	Chip_PININT_SetPinModeEdge(LPC_GPIO_PIN_INT, PININTCH(PHASE_PININT_INDEX));	//Se setea el trigger por flancos
	LPC_GPIO_PIN_INT->SIENR |= PININTCH(PHASE_PININT_INDEX);					//Se setean los flancos ascendentes
	LPC_GPIO_PIN_INT->SIENF |= PININTCH(PHASE_PININT_INDEX);					//Se setean los flancos descendentes

	/* Habilitacion de las interrupciones */
	NVIC_SetPriority(PIN_INT0_IRQn, PHASE_INTERRUPT_PRIORITY);	//Se setea la prioridad de la interrupcion
	NVIC_ClearPendingIRQ(PIN_INT0_IRQn);						//Se limpian las interrupciones pendientes
	NVIC_EnableIRQ(PIN_INT0_IRQn);								//Se habilitan las interrupciones para el pin
}

/* Configuracion del timer */
void ConfigureTimerFireTrigger( void ){
	Chip_TIMER_Init(FIRE_TRIGGER_TIMER);		//Se habilita el timer
	Chip_RGU_TriggerReset(FIRE_TRIGGER_RST);	//Se resetea el periferico del timer
	while (Chip_RGU_InReset(FIRE_TRIGGER_RST));
	Chip_TIMER_Reset(FIRE_TRIGGER_TIMER);	//Se resetea el timer y se inicializa en cero

	/* Se habilitan las interrupciones por match. Cuando el timer alcanza el valor
	 * del registro, se dispara la interrupcion. */
	Chip_TIMER_MatchEnableInt(FIRE_TRIGGER_TIMER, FIRE_TRIGGER_CHANNEL);
	/* Se inicializa el valor maximo del timer */
	Chip_TIMER_SetMatch(FIRE_TRIGGER_TIMER, FIRE_TRIGGER_CHANNEL,0);
	/* Se resetea al timer automaticamente luego de alcanzar el maximo */
	Chip_TIMER_ResetOnMatchEnable(FIRE_TRIGGER_TIMER, FIRE_TRIGGER_CHANNEL);

	NVIC_SetPriority(FIRE_TRIGGER_IRQn, TIMER_INTERRUPT_PRIORITY);	//Se setea la prioridad de la interrupcion del timer

	NVIC_EnableIRQ(FIRE_TRIGGER_IRQn);				//Se habilitan las interrupciones del timer
	NVIC_ClearPendingIRQ(FIRE_TRIGGER_IRQn);		//Se limpian las interrupciones pendientes del timer

	/* Configuracion del pin de trigger del triac */
	Chip_SCU_PinMuxSet(TRIGGER_SCU_INT_PORT, TRIGGER_SCU_INT_PIN,(SCU_MODE_INBUFF_EN|SCU_MODE_INACT|SCU_MODE_FUNC0));
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, TRIGGER_GPIO_INT_PORT, TRIGGER_GPIO_INT_PIN);	//Pin de salida
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, TRIGGER_GPIO_INT_PORT, TRIGGER_GPIO_INT_PIN, (bool) false);
}

/* Configuracion del timer */
void ConfigureTimerTriggerOn( void ){
	Chip_TIMER_Init(TRIGGER_ON_TIMER);		//Se habilita el timer
	Chip_RGU_TriggerReset(TRIGGER_ON_RST);	//Se resetea el periferico del timer
	while (Chip_RGU_InReset(TRIGGER_ON_RST));
	Chip_TIMER_Reset(TRIGGER_ON_TIMER);				//Se resetea el timer y se inicializa en cero

	/* Se habilitan las interrupciones por match. Cuando el timer alcanza el valor
	 * del registro, se dispara la interrupcion. */
	Chip_TIMER_MatchEnableInt(TRIGGER_ON_TIMER, TRIGGER_ON_CHANNEL);
	/* Se inicializa el valor maximo del timer */
	Chip_TIMER_SetMatch(TRIGGER_ON_TIMER, TRIGGER_ON_CHANNEL,0);
	/* Se resetea al timer automaticamente luego de alcanzar el maximo */
	Chip_TIMER_ResetOnMatchEnable(TRIGGER_ON_TIMER, TRIGGER_ON_CHANNEL);

	NVIC_SetPriority(TRIGGER_ON_IRQn, TIMER_INTERRUPT_PRIORITY);//Se setea la prioridad de la interrupcion del timer

	NVIC_EnableIRQ(TRIGGER_ON_IRQn);			//Se habilitan las interrupciones del timer
	NVIC_ClearPendingIRQ(TRIGGER_ON_IRQn);		//Se limpian las interrupciones pendientes del timer
}
/*****************************************************************************/
