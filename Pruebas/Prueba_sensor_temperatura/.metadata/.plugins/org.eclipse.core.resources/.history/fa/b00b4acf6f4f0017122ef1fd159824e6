#include "board.h"

#define TICKRATE_HZ (1000)	/* 1000 ticks per second */

volatile bool systick_flag=false;
volatile bool adc_flag=false;
volatile uint16_t adc_data=0;

#define OPAMP_GAIN 234		//Ganancia del circuito amplificador de la termocupla

/**
 * @brief	Handle interrupt from SysTick timer
 * @return	Nothing
 */
static uint32_t tick_ct = 0;
void SysTick_Handler(void)
{
	tick_ct += 1;
	if ((tick_ct % 100) == 0) {
		systick_flag=true;
	}
}


void ADC0_IRQHandler(void){
	adc_flag=true;
	Chip_ADC_ReadValue(LPC_ADC0, ADC_CH0,&adc_data);
}


ADC_CLOCK_SETUP_T ADCSetup;

/**
 * @brief	main routine for blinky example
 * @return	Function should not exit.
 */
int main(void)
{
	float temp_termocupla;

	SystemCoreClockUpdate();
	Board_Init();

	/* Enable and setup SysTick Timer at a periodic rate */
	SysTick_Config(SystemCoreClock / TICKRATE_HZ);

	/* Inicializacion del ADC0 */
	Chip_ADC_Init(LPC_ADC0, &ADCSetup);
	Chip_ADC_EnableChannel(LPC_ADC0, ADC_CH0, ENABLE);
	NVIC_EnableIRQ(ADC0_IRQn);
	Chip_ADC_Int_SetChannelCmd(LPC_ADC0, ADC_CH0, ENABLE);
	Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);


	while (1) {
		__WFI();
		if( adc_flag==true){									//Medicion de la termocupla
			temp_termocupla = ((float)adc_data0)*3.3/1023;		//Lo mapeo de 0-3.3v
			temp_termocupla /= OPAMP_GAIN;						//Lo divido por la ganancia del operacional
			temp_termocupla=23376.525*temp_termocupla-1.574;	//Mapeo la temperatura

			adc_flag0=false;
			Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);

		}

		if( systick_flag == true ){
			systick_flag=false;

			DEBUGOUT("Termocupla: %f\n\r",temp_termocupla);
			//DEBUGOUT("PT100: %fÂ°C\n\r",temp_pt100);
		}
	}
}
