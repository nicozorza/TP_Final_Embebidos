#ifndef _MAIN_H_
#define _MAIN_H_

#define BOARD_EDU_CIAA_NXP

#include "board.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include <stdlib.h>

#include "Configure.h"
#include "utils.h"

xSemaphoreHandle xStartSemaphore;	//Semaforo para el encendido del horno
TaskHandle_t StartTaskHandle;		//Handler de la tarea de encendido

xSemaphoreHandle xStopSemaphore;	//Semaforo para el apagado del horno
TaskHandle_t StopTaskHandle;		//Handler de la tarea de apagado

xSemaphoreHandle xADCSemaphore;	//Semaforo para el ADC
TaskHandle_t ADCTaskHandle;		//Handler de la tarea del ADC
volatile uint16_t adc_data=0;	//Variable global donde se almacenan las mediciones del ADC

xSemaphoreHandle xControllerSemaphore;	//Semaforo para el controlador
TaskHandle_t ControllerTaskHandle;		//Handler de la tarea del controlador

xSemaphoreHandle xPhaseSemaphore;		//Semaforo para la deteccion de cruces por cero
TaskHandle_t PhaseTaskHandle;			//Handler de la tarea del detector de fase

TaskHandle_t UpdateReferenceTaskHandle; //Handler de la tarea que actualiza la referencia de temperatura

float thermocouple_temp=0;		//Temperatura de la termocupla
bool trigger_state=false;		//Estado del trigger

/* Prioridades de las distintas tareas */
#define START_PRIORITY					4UL
#define STOP_PRIORITY					4UL
#define GET_TEMPERATURE_PRIORITY		1UL
#define CONTROLLER_PRIORITY				1UL
#define COOLER_PRIORITY					1UL
#define ZERO_CROSSING_PRIORITY			2UL
#define UPDATE_TEMPERATURE_PRIORITY		2UL

int cycles_count=0;					//Cantodad de ciclos de la senoidal para el control por ciclos enteros

#define TEMPERATURE_INERTIA 5		//Inercia de temperatura del horno
#define REFERENCE_INTERVAL (5000/(portTICK_RATE_MS))	//Intervalo de tiempo para la actualizacion de la referencia
float reference=0;				//Temperatura de referencia

#define COOLER_DELAY (10/(portTICK_RATE_MS))	//Delay de encendido y apagado del cooler
bool cool_temperature=false;					//Variable global que controla la velocidad del cooler

/* Curva de temperatura que se debe seguir */
const float temperature_profile[]={25, 26 , 27, 28,
		29.08,
		 29.20,
		 29.94,
		 31.19,
		 32.80,
		 34.69,
		 36.75,
		 38.90,
		 41.08,
		 43.21,
		 45.27,
		 47.20,
		 48.98,
		 50.58,
		 52.00,
		 53.23,
		 54.27,
		 55.13,
		 55.81,
		 56.33,
		 56.72,
		 56.98,
		 57.15,
		 57.26,
		 57.32,
		 57.37,
		 57.43,
		 57.53,
		 57.68,
		 57.91,
		 58.24,
		 58.68,
		 59.23,
		 59.90,
		 60.68,
		 61.57,
		 62.54,
		 63.58,
		 64.64,
		 65.68,
		 66.64,
		 67.47,
		 68.08,
		 68.38,
		 68.27,
		 67.64,
		 66.35,
		 64.25,
		 61.19
};

static void vHandlerStart(void *pvParameters);	//Tarea donde se espera que se presione el boton de encendido
static void vHandlerStop(void *pvParameters);	//Tarea donde se espera que se presione el boton de apagado
static void vHandlerGetTemperature(void *pvParameters);	//Tarea que mide la temperatura
static void vHandlerController(void *pvParameters);		//Tarea que controla la resistencia
static void vHandlerZeroCrossing(void *pvParameters);	//Tarea que se ejecuta con los cruces por cero
static void vHandlerUpdateTemperatureReference(void *pvParameters);	//Tarea que actualiza la referencia de temperatura
static void vHandlerCooler(void *pvParameters);	//Tarea que controla el ventilador

#endif
